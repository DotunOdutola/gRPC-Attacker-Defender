# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import defend_pb2 as defend__pb2


class DefendStub(object):
    """Interface exported by the server
    a Defend service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MonitorConfigurationFile = channel.unary_unary(
                '/Defend/MonitorConfigurationFile',
                request_serializer=defend__pb2.CheckConfigFileStatusRequest.SerializeToString,
                response_deserializer=defend__pb2.CheckConfigFileStatusResponse.FromString,
                )
        self.UpdateNetworkConfiguration = channel.unary_unary(
                '/Defend/UpdateNetworkConfiguration',
                request_serializer=defend__pb2.UpdateNetworkConfigurationRequest.SerializeToString,
                response_deserializer=defend__pb2.UpdateNetworkConfigurationResponse.FromString,
                )
        self.IdentifySystemVulnerabilities = channel.unary_unary(
                '/Defend/IdentifySystemVulnerabilities',
                request_serializer=defend__pb2.FindSystemVulnerabilitiesRequest.SerializeToString,
                response_deserializer=defend__pb2.FindSystemVulnerabilitiesResponse.FromString,
                )
        self.FindAttackerPresence = channel.unary_unary(
                '/Defend/FindAttackerPresence',
                request_serializer=defend__pb2.FindAttackerPresenceRequest.SerializeToString,
                response_deserializer=defend__pb2.FindAttackerPresenceResponse.FromString,
                )


class DefendServicer(object):
    """Interface exported by the server
    a Defend service
    """

    def MonitorConfigurationFile(self, request, context):
        """MonitorConfigurationFile obtains the CheckConfigFileStatusResponse from a given
        CheckConfigFileStatusRequest. Monitors a specified configuration file until it notices a
        change and reports it.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateNetworkConfiguration(self, request, context):
        """UpdateNetworkConfiguration obtains a UpdateNetworkConfigurationResponse
        from a given UpdateNetworkConfigurationRequest. Updates the network configuration
        settings based on the parameters it receives.   
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IdentifySystemVulnerabilities(self, request, context):
        """IdentifySystemVulnerabilities obtains a FindSystemVulnerabilitiesResponse
        from a given FindSystemVulnerabilitiesRequest. Initiated first in the process to
        run a check to search for system vulnerabilities that could be attacked.  
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindAttackerPresence(self, request, context):
        """FindAttackerPresence obtains a FindAttackerPresenceResponse from a given
        FindAttackerPresenceResponse. FindAttackerPresence is reached once a system
        has been compromised and the intent now is to find what has been done.
        (A follow up RPC could be made to supplement this RPC to perform the action
        because this is RPC is only to investigate.)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DefendServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MonitorConfigurationFile': grpc.unary_unary_rpc_method_handler(
                    servicer.MonitorConfigurationFile,
                    request_deserializer=defend__pb2.CheckConfigFileStatusRequest.FromString,
                    response_serializer=defend__pb2.CheckConfigFileStatusResponse.SerializeToString,
            ),
            'UpdateNetworkConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateNetworkConfiguration,
                    request_deserializer=defend__pb2.UpdateNetworkConfigurationRequest.FromString,
                    response_serializer=defend__pb2.UpdateNetworkConfigurationResponse.SerializeToString,
            ),
            'IdentifySystemVulnerabilities': grpc.unary_unary_rpc_method_handler(
                    servicer.IdentifySystemVulnerabilities,
                    request_deserializer=defend__pb2.FindSystemVulnerabilitiesRequest.FromString,
                    response_serializer=defend__pb2.FindSystemVulnerabilitiesResponse.SerializeToString,
            ),
            'FindAttackerPresence': grpc.unary_unary_rpc_method_handler(
                    servicer.FindAttackerPresence,
                    request_deserializer=defend__pb2.FindAttackerPresenceRequest.FromString,
                    response_serializer=defend__pb2.FindAttackerPresenceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Defend', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Defend(object):
    """Interface exported by the server
    a Defend service
    """

    @staticmethod
    def MonitorConfigurationFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Defend/MonitorConfigurationFile',
            defend__pb2.CheckConfigFileStatusRequest.SerializeToString,
            defend__pb2.CheckConfigFileStatusResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateNetworkConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Defend/UpdateNetworkConfiguration',
            defend__pb2.UpdateNetworkConfigurationRequest.SerializeToString,
            defend__pb2.UpdateNetworkConfigurationResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IdentifySystemVulnerabilities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Defend/IdentifySystemVulnerabilities',
            defend__pb2.FindSystemVulnerabilitiesRequest.SerializeToString,
            defend__pb2.FindSystemVulnerabilitiesResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindAttackerPresence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Defend/FindAttackerPresence',
            defend__pb2.FindAttackerPresenceRequest.SerializeToString,
            defend__pb2.FindAttackerPresenceResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
